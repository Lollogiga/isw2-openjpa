/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 01 11:00:17 GMT 2025
 */

package org.apache.openjpa.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.openjpa.lib.util.LRUMap;
import org.apache.openjpa.util.CacheMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CacheMap_ESTest extends CacheMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      boolean boolean0 = cacheMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      boolean boolean0 = cacheMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Object object0 = new Object();
      BiFunction<LRUMap, Object, LRUMap> biFunction0 = (BiFunction<LRUMap, Object, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      cacheMap0.merge(object0, object0, biFunction0);
      boolean boolean0 = cacheMap0.isEmpty();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Object object0 = new Object();
      BiFunction<LRUMap, Object, LRUMap> biFunction0 = (BiFunction<LRUMap, Object, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = cacheMap0.merge(object0, object0, biFunction0);
      assertNotNull(object1);
      
      cacheMap0.clear();
      assertTrue(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.put((Map) cacheMap0, (Object) cacheMap0, (Object) null);
      cacheMap0.clear();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.remove((Map) cacheMap0, (Object) null);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      Set set0 = cacheMap0.keySet();
      cacheMap0.put((Map) lRUMap0, (Object) set0, (Object) lRUMap0);
      assertTrue(set0.isEmpty());
      
      cacheMap0.putAll((Map) lRUMap0);
      cacheMap0.putAll((Map) lRUMap0, false);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      Set set0 = cacheMap0.keySet();
      cacheMap0.put((Map) lRUMap0, (Object) set0, (Object) lRUMap0);
      assertEquals(0, set0.size());
      
      cacheMap0.putAll((Map) lRUMap0, false);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Object object0 = new Object();
      BiFunction<LRUMap, Object, LRUMap> biFunction0 = (BiFunction<LRUMap, Object, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = cacheMap0.merge(object0, object0, biFunction0);
      Object object2 = cacheMap0.put(object1, object1);
      assertNotNull(object2);
      assertTrue(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Function<CacheMap, CacheMap> function0 = Function.identity();
      Object object0 = cacheMap0.computeIfAbsent(cacheMap0, function0);
      CacheMap cacheMap1 = (CacheMap)cacheMap0.getOrDefault(object0, cacheMap0);
      assertNotNull(cacheMap1);
      assertEquals(1000, cacheMap1.getCacheSize());
      assertTrue(cacheMap1.isLRU());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      boolean boolean0 = cacheMap0.unpin((Object) null);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      boolean boolean0 = cacheMap0.pin(cacheMap0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      int int0 = cacheMap0.getSoftReferenceSize();
      assertEquals((-1), int0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-936));
      cacheMap0.setSoftReferenceSize((-936));
      assertTrue(cacheMap0.isLRU());
      assertEquals((-1), cacheMap0.getSoftReferenceSize());
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.setSoftReferenceSize(1747);
      assertEquals(1747, cacheMap0.getSoftReferenceSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      int int0 = cacheMap0.getCacheSize();
      assertEquals(1000, int0);
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 1000);
      assertEquals(1000, cacheMap0.getCacheSize());
      
      cacheMap0.setCacheSize((-1));
      int int0 = cacheMap0.getCacheSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.setCacheSize(10);
      assertEquals(10, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.cacheMapOverflowRemoved((Object) null, cacheMap0);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.toString();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.getPinnedKeys();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 1000);
      boolean boolean0 = cacheMap0.isLRU();
      assertFalse(boolean0);
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Object object0 = new Object();
      cacheMap0.softMapValueExpired(object0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      cacheMap0.softMapOverflowRemoved(cacheMap0, cacheMap0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.values();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      Function<CacheMap, CacheMap> function0 = Function.identity();
      cacheMap0.computeIfAbsent(cacheMap0, function0);
      CacheMap cacheMap1 = (CacheMap)cacheMap0.remove((Object) cacheMap0);
      assertEquals(1000, cacheMap1.getCacheSize());
      assertTrue(cacheMap1.isLRU());
      assertNotNull(cacheMap1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.put((Object) null, (Object) null);
      LRUMap lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap(cacheMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key=null value=null size=0 maxSize=1 This should not occur if your keys are immutable, and you have used synchronization properly.
         //
         verifyException("org.apache.openjpa.lib.util.collections.LRUMap", e);
      }
  }
}
