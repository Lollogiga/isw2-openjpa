/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Sep 01 11:00:17 GMT 2025
 */

package org.apache.openjpa.util;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CacheMap_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.openjpa.util.CacheMap"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CacheMap_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$Values",
      "org.apache.openjpa.lib.util.collections.LRUMap",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$EntrySetIterator",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap",
      "org.apache.openjpa.util.CacheMap$ValueCollection",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$Entry",
      "org.apache.openjpa.lib.util.SizedMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$EntrySet",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkEntry",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$KeySet",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$Values",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$EntrySet",
      "org.apache.openjpa.lib.util.collections.IterableMap",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$HashEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$1",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceStrength",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$2",
      "org.apache.openjpa.util.CacheMap",
      "org.apache.openjpa.util.CacheMap$KeySet",
      "org.apache.openjpa.lib.util.collections.OrderedMapIterator",
      "org.apache.openjpa.lib.util.collections.ResettableIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$HashIterator",
      "org.apache.openjpa.util.CacheMap$2",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$KeySet",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkMapIterator",
      "org.apache.openjpa.util.CacheMap$1",
      "org.apache.openjpa.util.CacheMap$EntryIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$SoftEntry",
      "org.apache.openjpa.util.CacheMap$3",
      "org.apache.openjpa.lib.util.collections.KeyValue",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$3",
      "org.apache.openjpa.lib.util.collections.AbstractEmptyIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$4",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap",
      "org.apache.openjpa.lib.util.collections.IteratorChain",
      "org.apache.openjpa.lib.util.ReferenceMap",
      "org.apache.openjpa.lib.util.collections.MapIterator",
      "org.apache.openjpa.lib.util.collections.FilterIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$Entry",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkIterator",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap",
      "org.apache.openjpa.lib.util.collections.EmptyOrderedIterator",
      "org.apache.openjpa.lib.util.collections.BoundedMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentMap",
      "org.apache.openjpa.lib.util.LRUMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HashIterator",
      "org.apache.openjpa.lib.util.collections.OrderedIterator",
      "org.apache.openjpa.lib.util.collections.OrderedMap",
      "org.apache.openjpa.util.CacheMap$EntrySet"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.BiFunction", false, CacheMap_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CacheMap_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.openjpa.util.CacheMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap",
      "org.apache.openjpa.util.CacheMap$1",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap",
      "org.apache.openjpa.util.CacheMap$2",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap",
      "org.apache.openjpa.lib.util.collections.LRUMap",
      "org.apache.openjpa.lib.util.LRUMap",
      "org.apache.openjpa.util.CacheMap$3",
      "org.apache.openjpa.util.CacheMap$KeySet",
      "org.apache.openjpa.util.CacheMap$ValueCollection",
      "org.apache.openjpa.util.CacheMap$EntrySet",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceStrength",
      "org.apache.openjpa.util.CacheMap$EntryIterator",
      "org.apache.openjpa.lib.util.collections.IteratorChain",
      "org.apache.openjpa.lib.util.collections.FilterIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$EntrySet",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$HashIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$3",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HashIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$KeySet",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$Values",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap$Entry",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$HashEntry",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkEntry",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$EntrySet",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkIterator",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$EntrySetIterator",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap",
      "org.apache.openjpa.lib.util.collections.ReferenceMap",
      "org.apache.openjpa.lib.util.ReferenceHashMap",
      "org.apache.openjpa.lib.util.collections.AbstractEmptyIterator",
      "org.apache.openjpa.lib.util.collections.EmptyOrderedIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$4",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$SoftEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$2",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$Values",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$1",
      "org.apache.openjpa.lib.util.collections.AbstractLinkedMap$LinkMapIterator",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$KeySet"
    );
  }
}
