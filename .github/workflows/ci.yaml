# Nome del workflow, visibile nella tab "Actions" di GitHub
name: Java CI for OpenJPA

# Eventi che attivano l'esecuzione del workflow
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Ti permette di avviare il workflow manualmente dalla UI di GitHub per fare dei test
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build, Test, JaCoCo & PIT
    # Sistema operativo su cui eseguire i comandi
    runs-on: ubuntu-latest

    steps:
      # 1. Clona il codice del tuo repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Imposta l'ambiente Java con JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          # Gestisce la cache di Maven in modo automatico ed efficiente
          cache: 'maven'

      # 3. Costruisce l'intero progetto e genera il report JaCoCo
      - name: Build all modules and generate JaCoCo reports

        run: mvn -B clean install --file pom.xml

      # 4. Esegue PIT solo sul modulo openjpa-kernel
      - name: Generate PIT report in openjpa-kernel
        # Ora possiamo eseguire il comando per PIT dentro la cartella specifica.
        # Maven trover√† le altre dipendenze nel repository locale installate dallo step precedente.
        run: mvn -B org.pitest:pitest-maven:mutationCoverage --file pom.xml
        working-directory: openjpa-kernel

      # 5. Carica il report di JaCoCo come artefatto
      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          # Il percorso dove vengono generati i report di JaCoCo.
          path: openjpa-kernel/target/site/jacoco/
          if-no-files-found: 'warn' # In caso di problemi, non fa fallire la build

      # 6. Carica il report di PIT come artefatto
      - name: Upload PIT Report
        uses: actions/upload-artifact@v4
        with:
          name: pit-report
          # Il percorso standard per i report di PIT.
          path: openjpa-kernel/target/pit-reports/
          if-no-files-found: 'warn' # In caso di problemi, non fa fallire la build
